% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/silhouette_analysis.R
\name{silhouette_analysis}
\alias{silhouette_analysis}
\title{Wrapper function to perform silhouette analysis on different cluster numbers}
\usage{
silhouette_analysis(mat, cluster_object = NULL, n_clusters)
}
\arguments{
\item{mat}{(numeric matrix) data matrix that clustering was performed on 
(or will be performed using k-means clustering)}

\item{cluster_object}{(hclust) a cluster object obtained from running hclust(), optional}

\item{n_clusters}{(numeric) a vector of cluster numbers for which silhouette analysis is
performed}
}
\value{
a list with three objects, silhouette analysis data, and two summary plots
  obtained using lattice graphics.
}
\description{
Silhouette analysis shows the clusters that have explanatory power.
That includes clusters that are best separated from the neighbours 
resulting in a higher average silhoutte width (the decisive metric to 
judge optimal cluster number). This function applies the silhouette analysis iteratively for a vector of 
different cluster numbers and stores results in a list.
}
\details{
Prerequesite for silhouette analysis is a cluster object that can be obtained
  by e.g. running hclust(d = dist(mat), method = "ward.D"). The alternative is to supply
  no cluster object, then the functions performs a kmeans() clustering for the indicated
  number of clusters.
}
\examples{

# this function requires some additional packlages
library(lattice)
library(latticeExtra)
library(cluster)
library(dplyr)

# generate a random matrix that we use for clustering with the 
# format of 100 rows (e.g. determined gene expression) and 10 
# columns (conditions)
mat <- matrix(rnorm(1000), ncol = 10)

# we can perform clustering on this matrix using e.g. hclust:
# there is clearly no good separation between different clusters of 'genes'
clust <- hclust(dist(mat))
plot(clust)

# perform silhouette analysis for 2 to 10 different clusters
sil_result <- silhouette_analysis(mat, n_clusters = 2:10)

# plot results
print(sil_result$plot.clusters, split = c(1,1,2,1), more = TRUE)
print(sil_result$plot.summary, split = c(2,1,2,1))

}
